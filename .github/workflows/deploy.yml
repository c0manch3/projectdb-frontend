name: Deploy to Production

# Trigger deployment only when pull request is merged to main
on:
  push:
    branches:
      - main

# Cancel in-progress deployments for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Build
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npx vite build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Job 2: Deploy to Production
  deploy:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://lencondb.ru

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Deploy to server via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist/*"
          target: "/var/www/lencondb.ru/"
          strip_components: 1
          overwrite: true

      - name: Reload Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "=== Reloading Nginx ==="
            echo '${{ secrets.SUDO_PASSWORD }}' | sudo -S systemctl reload nginx
            echo "‚úÖ Deployment completed successfully!"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Frontend: https://lencondb.ru"
          else
            echo "‚ùå Deployment failed!"
          fi

  # Job 3: Verify Deployment
  verify:
    name: Verify Deployment
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check frontend availability
        run: |
          echo "Checking frontend availability..."
          sleep 5

          # Check HTTPS endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://lencondb.ru)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Frontend is accessible (HTTP $HTTP_CODE)"
          else
            echo "‚ùå Frontend is not accessible (HTTP $HTTP_CODE)"
            exit 1
          fi
